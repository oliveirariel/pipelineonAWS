AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DatabaseName:
    Description: The name of the first database to be created when the cluster is created
    Type: String
    Default: dev
    AllowedPattern: '([a-z]|[0-9])+'
  ClusterType:
    Description: The type of cluster
    Type: String
    Default: single-node
    AllowedValues:
      - single-node
      - multi-node
  NumberOfNodes:
    Description: >-
      The number of compute nodes in the cluster. For multi-node clusters, the
      NumberOfNodes parameter must be greater than 1
    Type: Number
    Default: '1'
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: ds2.xlarge
    AllowedValues:
      - ds2.xlarge
      - ds2.8xlarge
      - dc1.large
      - dc1.8xlarge
  MasterUsername:
    Description: >-
      The user name that is associated with the master user account for the
      cluster that is being created
    Type: String
    Default: user
    AllowedPattern: '([a-z])([a-z]|[0-9])*'
  MasterUserPassword:
    Description: >-
      The password that is associated with the master user account for the
      cluster that is being created.
    Type: String
    NoEcho: 'true'
  InboundTraffic:
    Description: Allow inbound traffic to the cluster from this CIDR range.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PortNumber:
    Description: The port number on which the cluster accepts incoming connections.
    Type: Number
    Default: '5439'
Conditions:
  IsMultiNodeCluster:
    'Fn::Equals':
      - Ref: ClusterType
      - multi-node
Resources:
  MyBucket: 
   Type: AWS::S3::Bucket

  Logsbucket:
   Type: AWS::S3::Bucket
    
  RedshiftCluster:
    Type: 'AWS::Redshift::Cluster'
    Properties:
      ClusterType:
        Ref: ClusterType
      NumberOfNodes:
        'Fn::If':
          - IsMultiNodeCluster
          - Ref: NumberOfNodes
          - Ref: 'AWS::NoValue'
      NodeType:
        Ref: NodeType
      DBName:
        Ref: DatabaseName
      MasterUsername:
        Ref: MasterUsername
      MasterUserPassword:
        Ref: MasterUserPassword
      ClusterParameterGroupName:
        Ref: RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
        - Ref: SecurityGroup
      ClusterSubnetGroupName:
        Ref: RedshiftClusterSubnetGroup
      PubliclyAccessible: 'true'
      Port:
        Ref: PortNumber
      ClusterIdentifier: mycluster

  SubnetGroup:
    Type: 'AWS::Redshift::ClusterSubnetGroup'
    Properties:
      Description: String
      SubnetIds:
        - Ref: Subnet
   
  RedshiftClusterSubnetGroup:
    Type: 'AWS::Redshift::ClusterSubnetGroup'
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - Ref: Subnet
    
  RedshiftClusterParameterGroup:
    Type: 'AWS::Redshift::ClusterParameterGroup'
    Properties:
      Description: My parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'

  myInternetGateway:
   Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: myInternetGateway
  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
    
  S3Endpoint:
   Type: 'AWS::EC2::VPCEndpoint'
   Properties:
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal: '*'
          Action:
            - 's3:GetObject'
          Resource:
            - '*'
    ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
    VpcId: !Ref VPC  

  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
  
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group
      SecurityGroupIngress:
        - CidrIp:
            Ref: InboundTraffic
          FromPort:
            Ref: PortNumber
          ToPort:
            Ref: PortNumber
          IpProtocol: tcp
      VpcId:
        Ref: VPC
    
  MyPipeline:
   Type: AWS::DataPipeline::Pipeline
   Properties:
     Name: S3toRedshift
     Activate: true
     ParameterObjects: 
      - 
        Id: "myInputS3Loc"
        Attributes: 
          - 
            Key: "type"
            StringValue: "AWS::S3::ObjectKey"
          -
            Key: "default"
            StringValue: 
             Ref: MyBucket 

     PipelineObjects:
      - 
        Id: "Schedule"
        Name: "RunOnce"
        Fields: 
          - 
            Key: "occurrences"
            StringValue: "1"
          - 
            Key: "startAt"
            StringValue: "FIRST_ACTIVATION_DATE_TIME"
          - 
            Key: "type"
            StringValue: "Schedule"
          - 
            Key: "period"
            StringValue: "1 Day"
      - 
        Id: "myRedshiftDatabase"
        Name: "RedshiftDatabase"
        Fields: 
          - 
            Key: "clusterId"
            StringValue: 
             Ref: RedshiftCluster
          - 
            Key: "username"
            StringValue:
             Ref: MasterUsername
          - 
            Key: "type"
            StringValue: "RedshiftDatabase"
          - 
            Key: "*password"
            StringValue: 
             Ref: MasterUserPassword
          - 
            Key: "databaseName"
            StringValue: 
             Ref: DatabaseName
          -
            Key: "region"
            StringValue: "us-east-1"  
      - 
        Id: "Default"
        Name: "Default"
        Fields: 
          - 
            Key: "type"
            StringValue: "Default"
          - 
            Key: "scheduleType"
            StringValue: "cron"
          - 
            Key: "failureAndRerunMode"
            StringValue: "CASCADE"
          -
            Key: "pipelineLogUri"
            StringValue: 
             Ref: Logsbucket
          - 
            Key: "role"
            StringValue: "role"
          - 
            Key: "resourceRole"
            StringValue: "resourceRole"
          - 
            Key: "schedule"
            StringValue: "Schedule"      
      - 
        Id: "myInputData"
        Name: "S3InputDataNode"
        Fields: 
          - 
            Key: "type"
            StringValue: "S3DataNode"
          - 
            Key: "filePath"
            StringValue: 
             Ref: MyBucket
 
          -
            Key: "schedule"  
            RefValue: "Schedule"  
      - 
        Id: "myEC2Resource"
        Name: "Ec2Instance"
        Fields: 
          - 
            Key: "instanceType"
            StringValue: "t1.micro"
          - 
            Key: "terminateAfter"
            StringValue: "2 Hours"  
          - 
            Key: "type"
            StringValue: "Ec2Resource"               
          - 
            Key: "resourceRole"
            StringValue: "resourceRole"  
          - 
            Key: "role"
            StringValue: "role"
          -
            Key: "securityGroups"  
            StringValue: 
             Ref: SecurityGroup
          -
            Key: "schedule"  
            RefValue: "Schedule"  
      - 
        Id: "myRedshiftDataNode"
        Name: "DestRedshiftTable"
        Fields:  
          - 
            Key: "type"
            StringValue: "RedshiftDataNode"
          - 
            Key: "database"
            RefValue: 
             Ref: DatabaseName
          - 
            Key: "tableName"
            StringValue: "data"    
          - 
            Key: "schedule"  
            RefValue: "Schedule"
      - 
        Id: "S3ToRedshiftCopyActivity"
        Name: "RedshiftCopy"
        Fields:       
          - 
            Key: "type"
            StringValue: "RedshiftCopyActivity"
          - 
            Key: "input"
            RefValue: "myInputData"
          - 
            Key: "output"
            RefValue: "myRedshiftDataNode"
          - 
            Key: "insertMode"
            StringValue: "KEEP_EXISTING"
          - 
            Key: "runsOn"
            RefValue: "myEC2Resource"     
          -
            Key: "schedule"  
            RefValue: "Schedule"